<predefined> ::= "def evolve("<vars>"):{:"<NEWLINE><code>":}"
<NEWLINE> ::= "#"

<all_vars> ::= <vars> | <vars> | <vars> | <vars> | <vars> | <vars> |
               <nums> | <nums> | <nums> | <nums> | <nums> | <nums> |
               "'"<STRINGS>"'" | "'"<STRINGS>"'" | "'"<STRINGS>"'" | "'"<STRINGS>"'" | "'"<STRINGS>"'" |
               '"'<STRINGS>'"' | '"'<STRINGS>'"' | '"'<STRINGS>'"' | '"'<default_str>'"' | "'"<default_str>"'" | '"'<default_str>'"' | "'"<default_str>"'" |
               <var_list> |  <var_list> |  <var_list> |
               <var_fuction> |  <var_fuction> |  <var_fuction> |
               <var_expr> |  <var_expr> |  <var_expr> |
               <nums><vars> | <nums><vars> |
               "None" | "None" | "None" | "None" | "None" |
               "("<vars>")" | "("<vars>")" | "("<vars>")" |
               "[]" |  "[]" |  "[]" |
               <index_list> | <index_list> |
               <fstring> | <fstring> | <fstring> | <fstring> | <fstring> |
               <all_vars>" & "<all_vars> | "["<list>"]" | "["<list>"]" | "["<list>"]" | "("<list>")" | "("<list>")" | "("<list>")" |
               "True" | "False" | "True" | "False" |
               <kv_args> | "-"<var> | "("<all_vars>",)"

<vars> ::= <var> | <var>", "<vars> | <var> | <var> | <var> | <var> | <var> | <var> | <var> | <var> | <var>", "<all_vars> | <var>", "<all_vars> | <var>", "<all_vars> |
           <all_vars>", "<all_vars> | <all_vars>", "<all_vars> | <all_vars>", "<all_vars> | <all_vars>", "<all_vars> | "*"<vars> 
<var_list> ::= <var><index_list> | <var><index_list> | <var><index_list> | <var>"['"<STRINGS>"']" | <var><index_list><method> | <var>"['"<STRINGS>"']" | <var><index_list><method> | <var>"['"<STRINGS>"']"<method> | <all_vars><index_list> | "["<all_vars>"]" | "["<all_vars>"]"
<index_list> ::= "["<all_vars>"]" | "["<all_vars>"]" | "["<all_vars>":]" | "["<all_vars>":"<all_vars>"]" | "[:"<all_vars>"]" | "["<all_vars>"::"<all_vars>"]" | "[::"<all_vars>"]" | "["<all_vars>"::]"
<var_fuction> ::= <FUNC>"("<all_vars>")" | <all_vars><method> | <all_vars><method> | <all_vars><method><var_fuction> | <FUNC> | <FUNC>"("<all_vars>")" | <all_vars><method> | <all_vars><method> | <all_vars><method><var_fuction> | <FUNC> | "lambda "<var>": "<all_vars> | "lambda "<vars>": "<all_vars> | <FUNC>"("<all_vars>") "<inline_for> | "lambda "<vars>": "<condition_basic>
<var_expr> ::= <all_vars>" "<math_op>" "<all_vars> | <all_vars>" "<op>" "<all_vars> | "("<var_expr>")" | "("<var_expr>")" | <all_vars>" "<math_op>" "<all_vars> | <all_vars>" "<op>" "<all_vars> | <var_expr>" "<inline_for>

<code> ::= <statement> | <code><statement> | <statement> | <statement> | <statement>
<statement> ::= <stmt_list><NEWLINE> | <compound_stmt> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE> | <stmt_list><NEWLINE>
<compound_stmt> ::= <if> | <for_basic> | <while> | <try>
<stmt_list> ::= <assign_basic> | <return_basic> | <print> | <update_var> | "break" | "continue" | "pass" | <assign_basic> | <return_basic> | <raise> | <update_var> | "break" | "continue" | "pass" | <funcss> | <yield> 

<raise> ::= "raise ValueError("<fstring>")" | "raise ValueError("<fstring>") from "<var> | "raise "<FUNC>"("<fstring>")"

<if> ::= "if "<condition_basic>":{:"<NEWLINE><code>":}"<if_stmt1>"else:{:"<NEWLINE><code>":}" | "if "<condition_basic>":{:"<NEWLINE><code>":}else:{:"<NEWLINE><code>":}" | "if "<condition_basic>":{:"<NEWLINE><code>":}" | "if "<condition_basic>":{:"<NEWLINE><code>":}"<if_stmt1>
<if_stmt1> ::= "elif "<condition_basic>":{:"<NEWLINE><code>":}" | <if_stmt1>"elif "<condition_basic>":{:"<NEWLINE><code>":}"
<condition_basic> ::= <var>" "<math_op>" "<num>" "<op>" "<num> | <condition_basic>" "<cond_op>" "<condition_basic> |  <var>" "<op>" "<num> | <var> | <cond_op>" "<var> | "("<condition_basic>")" | "not ("<condition_basic>")" | <condition>
<condition> ::= <all_vars>" "<math_op>" "<num>" "<op>" "<num> | <condition_basic>" "<cond_op>" "<condition_basic> |  <all_vars>" "<op>" "<num> | <funcss>" "<op>" "<num> | <all_vars>" "<op>" "<funcss> | <all_vars>" "<op>" "<all_vars> | <all_vars>" "<op>" "<all_vars>" "<op>" "<all_vars> | <all_vars>" "<cond_op>" "<all_vars> | <all_vars> | <cond_op>" "<all_vars> | "("<condition_basic>")" | "not ("<condition_basic>")" | <all_vars>" "<cond_op>" "<all_vars>" "<inline_for>
<op> ::= "<" | "<=" | ">" | ">=" | "!=" | "=="
<cond_op> ::= "or" | "and" | "not" | "in" | "is not" | "is" | "not in" | "&" | "|"

<try> ::= "try:{:"<NEWLINE><code>":}except:{:"<NEWLINE><code>":}" | "try:{:"<NEWLINE><code>":}except:{:"<NEWLINE><code>":}finally:{:"<NEWLINE><code>":}" | "try:{:"<NEWLINE><code>":}except:{:"<NEWLINE><code>":}else:{:"<NEWLINE><code>":}" |
          "try:{:"<NEWLINE><code>":}"<try_stmt1>"except:{:"<NEWLINE><code>":}" | "try:{:"<NEWLINE><code>":}"<try_stmt1>"except:{:"<NEWLINE><code>":}finally:{:"<NEWLINE><code>":}" | "try:{:"<NEWLINE><code>":}"<try_stmt1>"except:{:"<NEWLINE><code>":}else:{:"<NEWLINE><code>":}" |
          "try:{:"<NEWLINE><code>":}"<try_stmt1> | "try:{:"<NEWLINE><code>":}except "<var>" as "<var>":{:"<NEWLINE><code>":}" | "try:{:"<NEWLINE><code>":}except "<all_vars>" as "<var>":{:"<NEWLINE><code>":}" | "try:{:"<NEWLINE><code>":}except "<all_vars>":{:"<NEWLINE><code>":}"
<try_stmt1> ::= "except "<var>":{:"<NEWLINE><code>":}" | "except "<var>" as "<var>":{:"<NEWLINE><code>":}" | "except "<all_vars>":{:"<NEWLINE><code>":}" | "except "<all_vars>" as "<var>":{:"<NEWLINE><code>":}"

<assign_basic> ::= <var>" "<ass_op>" ''" | <var>" "<ass_op>" "<num> | <var>" "<ass_op>" []" | <var>" "<ass_op>" {}" | <var>" "<ass_op>" []" | <var>" "<ass_op>" {}" | <var>" "<ass_op>" "<var> | <assign>
<assign> ::= <var>" "<ass_op>" ''" |
             <var>" "<ass_op>" "<all_vars> |
             <var>" "<ass_op>" "<all_vars> |
             <vars>" "<ass_op>" "<all_vars> |
             <var>" "<ass_op>" "<all_vars> |
             <vars>" "<ass_op>" "<all_vars> |
             <vars>" "<ass_op>" "<all_vars> |
             <var>" "<ass_op>" {"<kv_dict>"}" | 
             <vars>" "<ass_op>" "<var_expr> |
             <vars>" "<ass_op>" "<var_expr> |
             <var>" "<ass_op>" ["<list>"]" | 
             <var>" "<ass_op>" ["<list>"]" | 
             <var>" "<ass_op>" ''.join("<var>")" |  
             <var>" "<ass_op>" "<sum> | 
             <var>" "<ass_op>" ''.join("<var>")"<method>"(' ', '')" |
             <all_vars>" "<ass_op>" "<all_vars> |
             <all_vars>" "<ass_op>" ''.join("<var>")" |
             <vars>" "<ass_op>" "<funcss> |
             <all_vars>" "<ass_op>" False" | <all_vars>" "<ass_op>" True" |
             <all_vars>" "<ass_op>" False" | <all_vars>" "<ass_op>" True" |
             <all_vars>" "<ass_op>" "<all_vars>" if "<condition_basic>" else "<all_vars>

<kv_dict> ::= "'"<STRINGS>"': "<all_vars> | "'"<STRINGS>"': "<var> | "'"<STRINGS>"': "<STRINGS> | "'"<STRINGS>"': "<nums> | <var>": "<all_vars> | <num>": "<all_vars> | <num>": '"<STRINGS>"'" | <num>": "<all_vars>", "<kv_dict> | <num>": '"<STRINGS>"', "<kv_dict> | <num>': "'<STRINGS>'"' | <num>': "'<STRINGS>'", '<kv_dict> |
              "'"<STRINGS>"': "<all_vars>", "<kv_dict> | "'"<STRINGS>"': "<var>", "<kv_dict> | "'"<STRINGS>"': "<STRINGS>", "<kv_dict> | "'"<STRINGS>"': "<nums>", "<kv_dict> | <kv_dict>" "<inline_for> | <var>": "<condition_basic>

<method> ::= <METHOD>"()" | <METHOD>"("<all_vars>")" | <METHOD> | <METHOD>"("<list>")" | <DEFAULT_METHOD>"()" | <DEFAULT_METHOD>"("<all_vars>")" | <DEFAULT_METHOD> | <DEFAULT_METHOD>"("<list>")"

<nums> ::=  <num> | <num> | <num> | <num> | <num> | <num><nums> | "-"<nums>

<return_basic> ::= "return "<var> | "return "<var> | "return "<var> | "return str("<var>")" |  "return "<nums> | <var> | "return True" | "return False" | "return ()" | "return []" | "return {}" | <return>
<return> ::= "return "<fstring> | "return str("<var>")" | "return ''.join("<var>")" | "return "<all_vars> | "return "<all_vars> | "return str("<all_vars>")" | "return "<sum> | "return "<funcss> | "return ("<all_vars>")" | "return ["<list>"]" | "return ("<all_vars>")" | "return ["<list>"]" | "return {"<kv_dict>"}" | "return not "<all_vars> | "return "<condition_basic> | "return "<all_vars>" "<inline_for>
<yield> ::= "yield "<var> | "yield "<fstring> | "yield str("<var>")" | "yield ''.join("<var>")" | "yield "<nums> | "yield "<all_vars> | "yield str("<all_vars>")" | "yield "<sum> | "yield "<funcss> | "yield ("<all_vars>")" | "yield ["<list>"]" | "yield {"<kv_dict>"}"

<print> ::= "print("<fstring>")" | "print("<var>")" | "print("<fstring>")" | "print("<var>")" | "print("<all_vars>")"


<for_basic> ::= "for "<var>" in "<var>":{:"<NEWLINE><code>":}" | 
                "for "<var>" in "<var>":{:"<NEWLINE><code>":}" | 
                "for "<var>" in "<FUNC>"("<all_vars>"):{:"<NEWLINE><code>":}" |
                "for "<var>", "<var>" in "<FUNC>"("<all_vars>"):{:"<NEWLINE><code>":}" | <for>
<for> ::= "for "<var>" in "<FUNC>"("<FUNC>"("<all_vars>")):{:"<NEWLINE><code>":}" |
          "for "<var>", "<var>" in "<all_vars>":{:"<NEWLINE><code>":}" |
          "for ("<var>", "<var>") in "<FUNC>"("<all_vars>"):{:"<NEWLINE><code>":}" |
          "for ("<vars>", ("<vars>")) in "<FUNC>"("<all_vars>"):{:"<NEWLINE><code>":}" |
          "for "<var>" in "<var_list>":{:"<NEWLINE><code>":}" |
          "for ("<var>", "<var>") in "<all_vars>":{:"<NEWLINE><code>":}" |
          "for "<var>" in "<all_vars>":{:"<NEWLINE><code>":}" | <for_basic><support_for>

<while> ::= "while "<var>":{:"<NEWLINE><code>":}" | "while "<condition_basic>":{:"<NEWLINE><code>":}"

<inline_for> ::= "for "<all_vars>" in "<all_vars> | "if "<condition_basic>" else "<all_vars>" for "<all_vars>" in "<all_vars> | <inline_for><support_for> | "if "<vars>" else "<all_vars> | "if "<condition_basic>" else "<all_vars> | "if "<condition_basic>" else "<all_vars>" "<inline_for>

<update_var> ::= <var><method>

<support_for> ::= "else:{:"<NEWLINE><code>":}" | " if "<condition_basic>

<split> ::= <var><method>"('"<all_vars>")" | <var><method>"("<all_vars>")" | <all_vars>

<list> ::= <all_vars> | <inline_for> | <var><index_list> | <all_vars>" "<inline_for> | <all_vars>" "<inline_for> | <all_vars>" or "<all_vars>" "<inline_for>

<sum> ::= <all_vars>" "<list_op>" ''.join(("<all_vars>" "<inline_for>"))" | "["<list>"] "<list_op>" ["<list>"]" | "''.join(["<all_vars>" "<inline_for>"])" | "''.join(("<all_vars>" "<inline_for>"))"

<math_op> ::= "+" | "-" | "%" | "//" | "*" | "/" | "**" | "^" | "&" | "|"
<ass_op> ::= "=" | "+=" | "-=" | "*=" | "%=" | "/=" | "//=" | "^=" | "**=" | "&=" | "|="
<list_op> ::= "+"

<funcss> ::= <FUNC>"("<all_vars>")" | <FUNC>"("<all_vars>")" | <FUNC>"("<all_vars>")" | <FUNC>"(["<all_vars>"])" | <FUNC>"("<var>") "<math_op>" "<num> | <FUNC>"("<var><index_list>")" | <FUNC>"(["<list>"] "<math_op>" "<all_vars>") "<math_op>" "<all_vars> | <FUNC>"()" | <FUNC>"()" | <FUNC>"()" | <FUNC>"("<funcss>")" | <FUNC>"("<funcss>")" | <FUNC>"("<funcss>", "<all_vars>")" |
             <FUNC>"("<kv_args>")" | <FUNC>"("<all_vars>", "<kv_args>")" | <FUNC>"(*"<all_vars>")" | <FUNC>"(*"<all_vars>", "<kv_args>")" | <FUNC>"("<all_vars>")("<all_vars>")" | <FUNC>"("<all_vars>", "<kv_args>")("<all_vars>", "<kv_args>")" | <FUNC>"("<all_vars>")("<all_vars>", "<kv_args>")" | <FUNC>"("<all_vars>", "<kv_args>")("<all_vars>")" | <FUNC>"("<condition_basic>")" | <DEFAULT_FUNC>"("<all_vars>")" | <DEFAULT_FUNC>"(["<all_vars>"])" | <DEFAULT_FUNC>"("<var>") "<math_op>" "<num> | <DEFAULT_FUNC>"("<var><index_list>")" | <DEFAULT_FUNC>"(["<list>"] "<math_op>" "<all_vars>") "<math_op>" "<all_vars> | <DEFAULT_FUNC>"()" | <DEFAULT_FUNC>"("<funcss>")" | <DEFAULT_FUNC>"("<funcss>", "<all_vars>")" |
             <DEFAULT_FUNC>"("<kv_args>")" | <DEFAULT_FUNC>"("<all_vars>", "<kv_args>")" | <DEFAULT_FUNC>"(*"<all_vars>")" | <DEFAULT_FUNC>"(*"<all_vars>", "<kv_args>")" | <DEFAULT_FUNC>"("<all_vars>")("<all_vars>")" | <DEFAULT_FUNC>"("<all_vars>", "<kv_args>")("<all_vars>", "<kv_args>")" | <DEFAULT_FUNC>"("<all_vars>")("<all_vars>", "<kv_args>")" | <DEFAULT_FUNC>"("<all_vars>", "<kv_args>")("<all_vars>")" | <DEFAULT_FUNC>"("<condition_basic>")"

<fstring> ::= <fstring>"{"<all_vars>"}" | "'"<STRINGS>"'" | "'"<STRINGS>"'" | "'"<STRINGS>"'" | "{"<all_vars>"}"<fstring> | "f'"<fstring>"'" | "'"<fstring>"'" | <fstring>"{"<all_vars>"}"<fstring> | <STRINGS> | <STRINGS> | <STRINGS> |
              <fstring>"{"<all_vars>"}" | '"'<STRINGS>'"' | '"'<STRINGS>'"' | "{"<all_vars>"}"<fstring> | 'f"'<fstring>'"' | '"'<fstring>'"' | <fstring>"{"<all_vars>"}"<fstring> | <STRINGS> |
              "'"<STRINGS>"'" | "f'"<fstring>"'" | "'"<fstring>"'" | <STRINGS> | '"'<STRINGS>'"' | 'f"'<fstring>'"' | '"'<fstring>'"' | <STRINGS> | "f'{"<var>"}'" | 'f"{'<var>'}"' | "f'{"<all_vars>"}'" | 'f"{'<all_vars>'}"' |
              "'"<STRINGS>"'" | <STRINGS> | '"'<STRINGS>'"' | <STRINGS> | <STRINGS> | <STRINGS> | <default_str> | <default_str> | <default_str> | <default_str> | "'"<default_str>"'" | '"'<default_str>'"'

<kv_args> ::= <KWARGNAMES>"="<all_vars> | <KWARGNAMES>"="<nums> | <KWARGNAMES>"='"<STRINGS>"'" | <KWARGNAMES>"="<var> | <KWARGNAMES>"="<nums> | <KWARGNAMES>"='"<STRINGS>"'" | <KWARGNAMES>"="<var> | <KWARGNAMES>'="'<STRINGS>'"' |
              <KWARGNAMES>"="<all_vars>", "<kv_args>

<default_str> ::= <normal_str> | <normal_str> | <normal_str> | <normal_str> | <normal_str> | <normal_str> | <normal_str> |
                  <normal_str><normal_str> | <normal_str><normal_str> | <normal_str>" "<normal_str> | <normal_str>" "<normal_str> |
                  <normal_str><hash_str> | <normal_str><hash_str> | <normal_str><hash_str> | <normal_str><hash_str> |
                  <default_str><normal_str> | <default_str><normal_str> | <normal_str><default_str> | <normal_str><default_str>
                  
<hash_str> ::=  "way" | "world" | "good" | "take" | "had" | "it" | "like" | "af" | "an" | "year" | "go" | "the" | "long" | "has" | "do" | "use" | "not" | "out" | "man" | "to" | "see" | "than" | "of" | "us" | "you" | "all" | "can" | "a" | "more" | "our" | "are" | "under" | "how" | "made" | "his" | "men" | "say" | "its" | "is" | "if" | "day" | "be" | "may" | "most" | "as" | "no" | "i" | "and" | "so" | "work" | "her" | "for" | "life" | "by" | "over" | "back" | "off" | "down" | "around" | "him" | "any" | "now" | "at" | "time" | "on" | "get" | "was" | "old" | "me" | "used" | "in" | "or" | "up" | "my" | "very" | "one" | "own" | "we" | "some" | "with" | "house" | "well" | "he" | "while" | "just" | "right"

<normal_str> ::=  "you" | "no" | "we" | "time" | "same" | "me" | "both" | "even" | "because" | "and" | "make" | "when" | "how" | "was" | "used" | "his" | "down" | "new" | "however" | "not" | "be" | "three" | "most" | "without" | "many" | "must" | "thought" | "still" | "being" | "its" | "from" | "get" | "it" | "who" | "other" | "too" | "with" | "should" | "work" | "my" | "during" | "your" | "that" | "men" | "is" | "life" | "long" | "us" | "they" | "out" | "after" | "against" | "between" | "could" | "good" | "only" | "great" | "own" | "very" | "in" | "did" | "into" | "american" | "here" | "may" | "state" | "some" | "another" | "each" | "our" | "last" | "never" | "off" | "their" | "man" | "made" | "first" | "those" | "there" | "like" | "went" | "her" | "states" | "him" | "over" | "himself" | "much" | "might" | "so" | "use" | "say" | "by" | "know" | "under" | "do" | "any" | "she" | "were" | "home" | "part" | "take" | "been" | "for" | "world" | "two" | "this" | "while" | "which" | "have" | "at" | "year" | "way" | "back" | "if" | "now" | "them" | "or" | "few" | "see" | "since" | "than" | "one" | "would" | "are" | "right" | "such" | "of" | "come" | "found" | "little" | "people" | "up" | "said" | "just" | "through" | "also" | "on" | "as" | "old" | "before" | "day" | "more" | "but" | "has" | "these" | "the" | "well" | "place" | "what" | "where" | "then" | "again" | "came" | "he" | "house" | "around" | "an" | "af" | "go" | "about" | "can" | "will" | "all" | "had" | "years" | "to" | "small" | "k" | "c" | "w" | "z" | "h" | "t" | "o" | "u" | "f" | "p" | "m" | "q" | "b" | "x" | "s" | "g" | "r" | "l" | "a" | "y" | "v" | "i" | "n" | "d" | "e" | "j" | "K" | "C" | "W" | "Z" | "H" | "T" | "O" | "U" | "F" | "P" | "M" | "Q" | "B" | "X" | "S" | "G" | "R" | "L" | "A" | "Y" | "V" | "I" | "N" | "D" | "E" | "J" | "'" | "~" | "&" | "-" | ":" | "|" | "]" | "?" | "=" | "/" | "_" | "." | "{" | "$" | "..." | "<" | "!" | "`" | "*" | "@" | ";" | "^" | "#" | "[" | ">" | "+" | "%" | "}" | "(" | "," | ")"


